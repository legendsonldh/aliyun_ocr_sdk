// TODO: Put public facing types in this file.
import 'package:intl/intl.dart';
import 'package:uuid/uuid.dart';
import 'dart:convert';
import 'package:crypto/crypto.dart';

/// Checks if you are awesome. Spoiler: you are.

class aliyunOcrClient {
  /// Your Aliyun Account accessKey
  String accessKeyId = "";

  /// Your Aliyun Account accessKeySecret
  String accessKeySecret = "";

  /// Use UTC(0) time to generate Signature
  String timeStamp = "";

  /// uuidCode for SignatureNonce
  String uuidCode = "";

  /// HTTP Reponse format "XML" or "JSON"
  String format = "";

  /// OCR Method;  RecognizeGeneral or RecognizeAdvanced
  String action = "";

  /// aliyun_ocr_serve
  String baseUrl = "";

  /// online image link; queries['Url'] = img_url
  String imgUrl = "";

  /// HTTP Method "GET" or "POST"
  String method = "";

  /// Siganture code. It must be generated by algorithm
  String signature = "";

  /// The params your will post or get
  Map<String, String> queries = {
    'Action': 'RecognizeGeneral',
    'Format': 'JSON',
    'AccessKeyId': "",
    'SignatureMethod': 'HMAC-SHA1',
    'Timestamp': "",
    'SignatureVersion': '1.0',
    'Version': '2021-07-07',
    'SignatureNonce': "",
  };

  /// init the Class
  aliYunOcRClient() {
    baseUrl = 'http://ocr-api.cn-hangzhou.aliyuncs.com/';
    var now = DateTime.now().toUtc();
    timeStamp =
        '${DateFormat("yyyy-MM-dd").format(now)}T${DateFormat.Hms().format(now)}Z';
    uuidCode = Uuid().v4().toString();
    queries['Timestamp'] = timeStamp;
    queries['SignatureNonce'] = uuidCode;
  }

  /// Signature Algorithm
  void generateSignature({
    required String accessKeySecret,
    required Map<String, String> queries,
    String method = 'GET',
  }) {
    final List<String> _sortedKeys = queries.keys.toList()..sort();
    final Map<String, String> _queries = <String, String>{
      for (final String k in _sortedKeys) encode(k): encode(queries[k]!),
    };
    final List<String> _formalizedStringPair = <String>[
      for (final MapEntry<String, String> e in _queries.entries)
        '${e.key}=${e.value}',
    ];
    final String _formalizedString = _formalizedStringPair.join('&');
    final String _signString = '$method'
        '&${encode('/')}'
        '&${encode(_formalizedString)}';
    final String _signature = encode(
      base64Encode(
        Hmac(
          sha1,
          utf8.encode(accessKeySecret + '&'),
        ).convert(utf8.encode(_signString)).bytes,
      ),
    );

    queries['Signature'] = Uri.decodeFull(_signature);
  }

  static String encode(String value) {
    return Uri.encodeComponent(value)
        .replaceAll('+', '%20')
        .replaceAll('*', '%2A')
        .replaceAll('%7E', '~');
  }
}
